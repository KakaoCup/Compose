"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3807],{3020:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=s(4848),n=s(8453);const r={sidebar_position:2},a="Kakao Compose Test Rule",i={id:"basics/kakao_test_rule",title:"Kakao Compose Test Rule",description:"How to reduce boilerplate",source:"@site/docs/basics/kakao_test_rule.md",sourceDirName:"basics",slug:"/basics/kakao_test_rule",permalink:"/Compose/docs/basics/kakao_test_rule",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Page Object Pattern",permalink:"/Compose/docs/basics/screens"},next:{title:"Structure",permalink:"/Compose/docs/basics/kakao_compose_structure"}},l={},c=[{value:"<strong>How to reduce boilerplate</strong>",id:"how-to-reduce-boilerplate",level:3},{value:"<strong>Global override <code>useUnmergedTree</code></strong>",id:"global-override-useunmergedtree",level:3}];function d(e){const o={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"kakao-compose-test-rule",children:"Kakao Compose Test Rule"})}),"\n",(0,t.jsx)(o.h3,{id:"how-to-reduce-boilerplate",children:(0,t.jsx)(o.strong,{children:"How to reduce boilerplate"})}),"\n",(0,t.jsxs)(o.p,{children:["When we writing UI test for compose we need to inject ",(0,t.jsx)(o.code,{children:"composeTestRule"})," in to each ",(0,t.jsx)(o.code,{children:"onComposeScreen"})," call."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:'    @Test\n    fun simpleTest() {\n        onComposeScreen<MainActivityScreen>(composeTestRule) {\n            myButton {\n                assertIsDisplayed()\n                assertTextContains("Button 1")\n            }\n        }\n    }\n'})}),"\n",(0,t.jsxs)(o.p,{children:["That's creating a lot of boilerplate in the code. But you can avoid it with ",(0,t.jsx)(o.code,{children:"KakaoComposeTestRule"})," ",(0,t.jsx)(o.a,{href:"https://github.com/KakaoCup/Compose/blob/master/sample/src/androidTest/java/io/github/kakaocup/compose/test/SimpleTestGlobalSemantic.kt",children:"Example"})]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:'class SimpleTestGlobalSemantic {\n\n    @get:Rule\n    val composeTestRule = createAndroidComposeRule<MainActivity>()\n\n    @get:Rule\n    val kakaoComposeTestRule = KakaoComposeTestRule(\n        semanticsProvider = composeTestRule\n    )\n\n    @Test\n    fun simpleTest() {\n        onComposeScreen<GlobalSemanticScreen> {\n            myText1 {\n                assertIsDisplayed()\n                assertTextContains("Simple text 1")\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(o.p,{children:["This rule will create a wrapper around ",(0,t.jsx)(o.code,{children:"composeTestRule"})," and provide it into ",(0,t.jsx)(o.code,{children:"ComposeScreen"})," or ",(0,t.jsx)(o.code,{children:"KNode"})," implicitly, what will reduce boilerplate in the tests."]}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsx)(o.h3,{id:"global-override-useunmergedtree",children:(0,t.jsxs)(o.strong,{children:["Global override ",(0,t.jsx)(o.code,{children:"useUnmergedTree"})]})}),"\n",(0,t.jsxs)(o.p,{children:["Compose framework always will try to optimise view tree and squash views if it acceptable. For example two ",(0,t.jsx)(o.code,{children:"Text"})," view will be squashed into one, what can create misleading in tests.\nBy default in Espresso ",(0,t.jsx)(o.code,{children:"useUnmergedTree"})," set as ",(0,t.jsx)(o.code,{children:"false"}),", but on practice for UI test we want to have it as ",(0,t.jsx)(o.code,{children:"true"})," in many cases. With ",(0,t.jsx)(o.code,{children:"KakaoComposeTestRule"})," we can override it globally."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:"    @get:Rule\n    val composeTestRule = createAndroidComposeRule<MainActivity>()\n\n    @get:Rule\n    val kakaoComposeTestRule = KakaoComposeTestRule(\n        semanticsProvider = composeTestRule,\n        useUnmergedTree = true\n    )\n"})})]})}function u(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,o,s)=>{s.d(o,{R:()=>a,x:()=>i});var t=s(6540);const n={},r=t.createContext(n);function a(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);