"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5732],{1173:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var n=s(4848),i=s(8453);const t={sidebar_position:3},r="Structure",c={id:"basics/kakao_compose_structure",title:"Structure",description:"Overview",source:"@site/docs/basics/kakao_compose_structure.md",sourceDirName:"basics",slug:"/basics/kakao_compose_structure",permalink:"/Compose/docs/basics/kakao_compose_structure",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Kakao Compose Test Rule",permalink:"/Compose/docs/basics/kakao_test_rule"},next:{title:"Intermediate",permalink:"/Compose/docs/category/intermediate"}},a={},d=[{value:"<strong>Overview</strong>",id:"overview",level:3},{value:"<strong>Core</strong>",id:"core",level:3},{value:"<strong>Optional</strong>",id:"optional",level:3},{value:"<code>compose-semantics</code>",id:"compose-semantics",level:4},{value:"<code>compose-ui</code>",id:"compose-ui",level:4},{value:"<code>compose-test</code>",id:"compose-test",level:4}];function l(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"structure",children:"Structure"})}),"\n",(0,n.jsx)(o.h3,{id:"overview",children:(0,n.jsx)(o.strong,{children:"Overview"})}),"\n",(0,n.jsxs)(o.p,{children:["Starting with version ",(0,n.jsx)(o.code,{children:"1.0.0"}),", Kakao Compose is organized into four primary modules, with the following dependency structure:"]}),"\n",(0,n.jsx)(o.mermaid,{value:'flowchart TD\n%% Nodes\n    KTest("compose-test")\n    KCompose("compose")\n    KUI("compose-ui")\n    KSemantics("compose-semantics")\n    AEspresso("Espresso")\n    ACompose("Android Compose")\n\n%% Connections\n    KTest --\x3e KCompose\n    KUI --\x3e KSemantics\n    KTest --\x3e KSemantics\n    KSemantics --\x3e ACompose \n    KCompose --\x3e ACompose \n    KCompose --\x3e AEspresso\n\n%% Style\n    style AEspresso color:#FFFFFF, fill:#AA00FF, stroke:#AA00FF\n    style ACompose color:#FFFFFF, fill:#AA00FF, stroke:#AA00FF'}),"\n",(0,n.jsx)(o.h3,{id:"core",children:(0,n.jsx)(o.strong,{children:"Core"})}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:[(0,n.jsx)(o.code,{children:"compose"})," - The foundational module that provides a DSL wrapper for Espresso methods, ",(0,n.jsx)(o.code,{children:"ComposeScreen"})," page objects, and support for ",(0,n.jsx)(o.code,{children:"KNode"})," and lists. Version 1+ maintains broad compatibility with version 0+, requiring minimal effort to upgrade."]}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["Add it with: ",(0,n.jsx)(o.code,{children:'implementation("io.github.kakaocup:compose:1.0.0")'})]}),"\n",(0,n.jsx)(o.h3,{id:"optional",children:(0,n.jsx)(o.strong,{children:"Optional"})}),"\n",(0,n.jsxs)(o.p,{children:["UI testing differs significantly between XML and Compose approaches. A key aspect of Compose is its reliance on Nodes, which lack type specificity. This creates challenges in UI test creation, such as the inability to perform type-based checks on views. View states can only be accessed via ",(0,n.jsx)(o.code,{children:"Semantic"})," providers. In earlier versions of Kakao Compose, developers often tried to embed custom semantics in the core library, which undermined its purpose as a simple Espresso wrapper. To resolve this, we shifted to an extension-based library model."]}),"\n",(0,n.jsx)(o.h4,{id:"compose-semantics",children:(0,n.jsx)(o.code,{children:"compose-semantics"})}),"\n",(0,n.jsxs)(o.p,{children:["A collection of default semantic keys utilized by the ",(0,n.jsx)(o.code,{children:"compose-ui"})," and ",(0,n.jsx)(o.code,{children:"compose-test"})," modules. This lightweight module includes only the semantics necessary for ",(0,n.jsx)(o.code,{children:"compose-test"})," to determine view states. It should be added explicitly only if you\u2019re using a design system and wish to avoid depending directly on ",(0,n.jsx)(o.code,{children:"compose-ui"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["Add it with: ",(0,n.jsx)(o.code,{children:'implementation("io.github.kakaocup:compose-semantics:1.0.0")'})]}),"\n",(0,n.jsx)(o.admonition,{title:"For projects with a design system",type:"tip",children:(0,n.jsxs)(o.p,{children:["You can integrate all necessary parameters into your design system by referencing the mappings in ",(0,n.jsx)(o.a,{href:"https://github.com/KakaoCup/Compose/tree/master/compose-ui/src/main/kotlin/io/github/kakaocup/compose/foundation",children:"compose-ui"}),", avoiding a transitive dependency on Compose through Kakao."]})}),"\n",(0,n.jsx)(o.h4,{id:"compose-ui",children:(0,n.jsx)(o.code,{children:"compose-ui"})}),"\n",(0,n.jsxs)(o.p,{children:["A wrapper around Compose\u2019s foundational components, mirroring their constructor signatures. These wrappers apply all applicable semantics from the ",(0,n.jsx)(o.code,{children:"compose-semantics"})," module, enabling the ",(0,n.jsx)(o.code,{children:"compose-test"})," module to leverage them. This module simplifies adding type-specific checks to your app."]}),"\n",(0,n.jsx)(o.admonition,{title:"Transitive Compose dependency",type:"warning",children:(0,n.jsx)(o.p,{children:"Including this module introduces an indirect dependency on your project\u2019s Compose version. This could lead to outdated components, though we aim to release updates aligned with new Compose versions."})}),"\n",(0,n.jsxs)(o.p,{children:["To bypass transitive dependencies via Kakao Compose, you can copy the ",(0,n.jsx)(o.code,{children:"compose-ui"})," source code into your project and depend solely on ",(0,n.jsx)(o.code,{children:"compose-semantics"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["Add it with: ",(0,n.jsx)(o.code,{children:'implementation("io.github.kakaocup:compose-ui:1.0.0")'})]}),"\n",(0,n.jsx)(o.h4,{id:"compose-test",children:(0,n.jsx)(o.code,{children:"compose-test"})}),"\n",(0,n.jsxs)(o.p,{children:["Offers nodes for validating typed components, such as ",(0,n.jsx)(o.code,{children:"KButtonNode"}),", ",(0,n.jsx)(o.code,{children:"KIconNode"}),", ",(0,n.jsx)(o.code,{children:"KProgressBar"}),", and more."]}),"\n",(0,n.jsxs)(o.p,{children:["Add it with: ",(0,n.jsx)(o.code,{children:'testImplementation("io.github.kakaocup:compose-test:1.0.0")'})]}),"\n",(0,n.jsxs)(o.p,{children:["Usage examples are available in the ",(0,n.jsx)(o.a,{href:"https://github.com/KakaoCup/Compose/tree/master/sample/src/androidTest/java/io/github/kakaocup/compose/test/node",children:"Sample project"}),"."]}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.p,{children:"This version maintains the original meaning while improving clarity and flow. Let me know if you'd like further adjustments!"})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,o,s)=>{s.d(o,{R:()=>r,x:()=>c});var n=s(6540);const i={},t=n.createContext(i);function r(e){const o=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(t.Provider,{value:o},e.children)}}}]);