"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6698],{3181:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/Compose/docs/introduction","docId":"introduction","unlisted":false},{"type":"link","label":"Setup","href":"/Compose/docs/setup","docId":"setup","unlisted":false},{"type":"category","label":"Basic","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Async Code and Idling Resource","href":"/Compose/docs/intermediate/async_code","docId":"intermediate/async_code","unlisted":false}],"href":"/Compose/docs/category/basic"},{"type":"category","label":"Intermediate","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Page Object Pattern","href":"/Compose/docs/basics/screens","docId":"basics/screens","unlisted":false}],"href":"/Compose/docs/category/intermediate"},{"type":"category","label":"Advance","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Reusable components","href":"/Compose/docs/advance/reusable_components","docId":"advance/reusable_components","unlisted":false}],"href":"/Compose/docs/category/advance"}]},"docs":{"advance/reusable_components":{"id":"advance/reusable_components","title":"Reusable components","description":"","sidebar":"tutorialSidebar"},"basics/screens":{"id":"basics/screens","title":"Page Object Pattern","description":"The Page Object pattern is a design pattern used in UI testing to improve test maintenance, readability, and reusability. It abstracts the UI structure and interactions into reusable components, making tests more modular and less brittle.","sidebar":"tutorialSidebar"},"intermediate/async_code":{"id":"intermediate/async_code","title":"Async Code and Idling Resource","description":"When using Kotlin Coroutines (or any other async frameworks) in your Android app, you can still leverage IdlingResource to synchronize your UI tests with asynchronous tasks. However, with coroutines, you can use IdlingResource in combination with Dispatchers to control when your app is considered \\"idle.\\"","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"Welcome to Kakao Compose tutorial. Let\'s make UI testing easies and simple. In this documentation we will try to explain functionality of Kakao Compose and","sidebar":"tutorialSidebar"},"setup":{"id":"setup","title":"Setup","description":"Setup project dependencies","sidebar":"tutorialSidebar"}}}}')}}]);