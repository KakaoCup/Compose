"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8533],{551:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var i=r(4848),o=r(8453);const t={sidebar_position:1},s="Async Code and Idling Resource",c={id:"intermediate/async_code",title:"Async Code and Idling Resource",description:'When using Kotlin Coroutines (or any other async frameworks) in your Android app, you can still leverage IdlingResource to synchronize your UI tests with asynchronous tasks. However, with coroutines, you can use IdlingResource in combination with Dispatchers to control when your app is considered "idle."',source:"@site/docs/intermediate/async_code.md",sourceDirName:"intermediate",slug:"/intermediate/async_code",permalink:"/Compose/docs/intermediate/async_code",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Intermediate",permalink:"/Compose/docs/category/intermediate"},next:{title:"Advance",permalink:"/Compose/docs/category/advance"}},a={},l=[{value:"1. <strong>Add Dependencies</strong>",id:"1-add-dependencies",level:3},{value:"2. <strong>Create a CoroutineIdlingResource</strong>",id:"2-create-a-coroutineidlingresource",level:3},{value:"3. <strong>Wrap CoroutineDispatcher with IdlingResource</strong>",id:"3-wrap-coroutinedispatcher-with-idlingresource",level:3},{value:"4. <strong>Use the IdlingDispatcher in Your App</strong>",id:"4-use-the-idlingdispatcher-in-your-app",level:3},{value:"5. <strong>Register IdlingResource in Your Test</strong>",id:"5-register-idlingresource-in-your-test",level:3},{value:"6. <strong>Alternative: Use <code>IdlingRegistry</code> for Global Coroutine Tracking</strong>",id:"6-alternative-use-idlingregistry-for-global-coroutine-tracking",level:3},{value:"Summary",id:"summary",level:3},{value:"<strong>Using <code>waitUntil</code> from Kakao</strong>",id:"using-waituntil-from-kakao",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"async-code-and-idling-resource",children:"Async Code and Idling Resource"})}),"\n",(0,i.jsxs)(n.p,{children:["When using Kotlin Coroutines (or any other async frameworks) in your Android app, you can still leverage ",(0,i.jsx)(n.code,{children:"IdlingResource"})," to synchronize your UI tests with asynchronous tasks. However, with coroutines, you can use ",(0,i.jsx)(n.code,{children:"IdlingResource"})," in combination with ",(0,i.jsx)(n.code,{children:"Dispatchers"}),' to control when your app is considered "idle."']}),"\n",(0,i.jsxs)(n.p,{children:["Here\u2019s how you can use ",(0,i.jsx)(n.code,{children:"IdlingResource"})," with coroutines in Android UI tests:"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"1-add-dependencies",children:["1. ",(0,i.jsx)(n.strong,{children:"Add Dependencies"})]}),"\n",(0,i.jsxs)(n.p,{children:["Ensure you have the necessary dependencies for coroutines and Espresso in your ",(0,i.jsx)(n.code,{children:"build.gradle"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-koltin",children:'dependencies {\n    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")\n    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")\n\n    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")\n    androidTestImplementation("androidx.test:runner:1.5.2")\n    androidTestImplementation("androidx.test:rules:1.5.2")\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"2-create-a-coroutineidlingresource",children:["2. ",(0,i.jsx)(n.strong,{children:"Create a CoroutineIdlingResource"})]}),"\n",(0,i.jsxs)(n.p,{children:["Implement an ",(0,i.jsx)(n.code,{children:"IdlingResource"})," that monitors coroutine execution. You can use a ",(0,i.jsx)(n.code,{children:"CoroutineDispatcher"})," to track whether coroutines are active."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"import androidx.test.espresso.IdlingResource\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.asCoroutineDispatcher\nimport java.util.concurrent.Executors\nimport java.util.concurrent.atomic.AtomicInteger\n\nclass CoroutineIdlingResource : IdlingResource {\n\n    private val counter = AtomicInteger(0)\n    private var resourceCallback: IdlingResource.ResourceCallback? = null\n\n    override fun getName(): String {\n        return CoroutineIdlingResource::class.java.name\n    }\n\n    override fun isIdleNow(): Boolean {\n        return counter.get() == 0\n    }\n\n    override fun registerIdleTransitionCallback(callback: IdlingResource.ResourceCallback?) {\n        this.resourceCallback = callback\n    }\n\n    fun increment() {\n        counter.getAndIncrement()\n    }\n\n    fun decrement() {\n        val counterVal = counter.decrementAndGet()\n        if (counterVal == 0) {\n            resourceCallback?.onTransitionToIdle()\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"3-wrap-coroutinedispatcher-with-idlingresource",children:["3. ",(0,i.jsx)(n.strong,{children:"Wrap CoroutineDispatcher with IdlingResource"})]}),"\n",(0,i.jsxs)(n.p,{children:["Create a custom ",(0,i.jsx)(n.code,{children:"CoroutineDispatcher"})," that updates the ",(0,i.jsx)(n.code,{children:"CoroutineIdlingResource"})," when coroutines start and finish."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"import kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.asCoroutineDispatcher\nimport java.util.concurrent.Executors\n\nclass IdlingDispatcher(private val idlingResource: CoroutineIdlingResource) : CoroutineDispatcher() {\n\n    private val dispatcher = Executors.newSingleThreadExecutor().asCoroutineDispatcher()\n\n    override fun dispatch(context: kotlin.coroutines.CoroutineContext, block: Runnable) {\n        idlingResource.increment()\n        dispatcher.dispatch(context, Runnable {\n            try {\n                block.run()\n            } finally {\n                idlingResource.decrement()\n            }\n        })\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"4-use-the-idlingdispatcher-in-your-app",children:["4. ",(0,i.jsx)(n.strong,{children:"Use the IdlingDispatcher in Your App"})]}),"\n",(0,i.jsxs)(n.p,{children:["Replace your default ",(0,i.jsx)(n.code,{children:"Dispatchers"})," (e.g., ",(0,i.jsx)(n.code,{children:"Dispatchers.IO"})," or ",(0,i.jsx)(n.code,{children:"Dispatchers.Main"}),") with the ",(0,i.jsx)(n.code,{children:"IdlingDispatcher"})," in your app code during tests."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"import kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\n\nclass MyViewModel : ViewModel() {\n\n    private val idlingResource = CoroutineIdlingResource()\n    private val idlingDispatcher = IdlingDispatcher(idlingResource)\n\n    fun fetchData() {\n        CoroutineScope(idlingDispatcher).launch {\n            // Simulate a network request or long-running task\n            kotlinx.coroutines.delay(2000)\n            // Update UI or state\n        }\n    }\n\n    fun getIdlingResource(): CoroutineIdlingResource {\n        return idlingResource\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"5-register-idlingresource-in-your-test",children:["5. ",(0,i.jsx)(n.strong,{children:"Register IdlingResource in Your Test"})]}),"\n",(0,i.jsxs)(n.p,{children:["In your UI test, register the ",(0,i.jsx)(n.code,{children:"CoroutineIdlingResource"})," before running the test and unregister it afterward."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import androidx.test.espresso.Espresso\nimport androidx.test.ext.junit.rules.ActivityScenarioRule\nimport androidx.test.ext.junit.runners.AndroidJUnit4\nimport org.junit.After\nimport org.junit.Before\nimport org.junit.Rule\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\n@RunWith(AndroidJUnit4::class)\nclass MyUITest {\n\n    @get:Rule\n    val activityRule = ActivityScenarioRule(MainActivity::class.java)\n\n    private lateinit var idlingResource: CoroutineIdlingResource\n\n    @Before\n    fun registerIdlingResource() {\n        activityRule.scenario.onActivity { activity ->\n            val viewModel = (activity as MainActivity).viewModel\n            idlingResource = viewModel.getIdlingResource()\n            Espresso.registerIdlingResources(idlingResource)\n        }\n    }\n\n    @Test\n    fun testFetchData() {\n        // Perform UI actions that trigger coroutines\n        onView(withId(R.id.fetchDataButton)).perform(click())\n\n        // Espresso will wait until the coroutine finishes\n        onView(withId(R.id.resultTextView)).check(matches(withText("Data Loaded")))\n    }\n\n    @After\n    fun unregisterIdlingResource() {\n        Espresso.unregisterIdlingResources(idlingResource)\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"6-alternative-use-idlingregistry-for-global-coroutine-tracking",children:["6. ",(0,i.jsxs)(n.strong,{children:["Alternative: Use ",(0,i.jsx)(n.code,{children:"IdlingRegistry"})," for Global Coroutine Tracking"]})]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to track all coroutines globally, you can use ",(0,i.jsx)(n.code,{children:"IdlingRegistry"})," to wrap the ",(0,i.jsx)(n.code,{children:"Dispatchers.Main"})," or ",(0,i.jsx)(n.code,{children:"Dispatchers.IO"}),". This approach is more advanced but ensures all coroutines are tracked."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"import kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.asCoroutineDispatcher\nimport java.util.concurrent.Executors\n\nobject IdlingDispatcher {\n    private val idlingResource = CoroutineIdlingResource()\n\n    fun register() {\n        Dispatchers.Main = IdlingDispatcherWrapper(Dispatchers.Main, idlingResource)\n        Espresso.registerIdlingResources(idlingResource)\n    }\n\n    fun unregister() {\n        Espresso.unregisterIdlingResources(idlingResource)\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["By using ",(0,i.jsx)(n.code,{children:"IdlingResource"})," with coroutines, you can ensure your UI tests wait for asynchronous tasks to complete. The key steps are:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a custom ",(0,i.jsx)(n.code,{children:"IdlingResource"})," to track coroutine execution."]}),"\n",(0,i.jsxs)(n.li,{children:["Wrap your ",(0,i.jsx)(n.code,{children:"CoroutineDispatcher"})," to update the ",(0,i.jsx)(n.code,{children:"IdlingResource"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Register and unregister the ",(0,i.jsx)(n.code,{children:"IdlingResource"})," in your tests."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This approach ensures your tests are reliable and synchronized with coroutine-based asynchronous operations."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"using-waituntil-from-kakao",children:(0,i.jsxs)(n.strong,{children:["Using ",(0,i.jsx)(n.code,{children:"waitUntil"})," from Kakao"]})}),"\n",(0,i.jsxs)(n.p,{children:["As an alternative option you can use ",(0,i.jsx)(n.code,{children:"waitUntil"})," function from Kakao Compose library\n",(0,i.jsx)(n.a,{href:"https://github.com/KakaoCup/Compose/blob/master/sample/src/androidTest/java/io/github/kakaocup/compose/test/WaitForTest.kt",children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"mySimpleText {\n    assertIsNotDisplayed()\n    waitUntil {\n        assertIsDisplayed()\n    }\n    assertIsDisplayed()\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"But we strongly recommending you to setup proper IdleResource for your UI tests"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);